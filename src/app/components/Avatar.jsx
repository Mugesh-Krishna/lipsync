/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/686f9fa40c7afd741510fff9.glb -o src/components/Avatar.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useFrame, useGraph, useLoader } from '@react-three/fiber'
import { useAnimations, useFBX, useGLTF } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { useControls } from 'leva'
import * as THREE from "three";

const corresponding={
  A:"viseme_PP",
  B:"viseme_kk",
  C:"viseme_I",
  D:"viseme_AA",
  E:"viseme_O",
  F:"viseme_U",
  G:"viseme_FF",
  H:"viseme_TH",
  I:"viseme_PP",
  
}
export function Avatar(props) {
  const { playAudio, script } = useControls({
    playAudio: false,
    script: {
      value: "meetup",
      options: ['meetup', "new"],
    }
  })

  const audio = useMemo(() => new Audio(`/audio/${script}.mp3`), [script]);
  const jsonFile = useLoader(THREE.FileLoader, `audio/${script}.json`);
  const lipsync = JSON.parse(jsonFile);
  useFrame(() => {
    const currentAudioTime = audio.currentTime;
Object.values(corresponding).forEach((value)=>{
    nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]] = 0;
    nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]] = 0; 
})

    for (let i = 0; i < lipsync.mouthCues.length; i++) {
      const mouthCues = lipsync.mouthCues[i];
      if (currentAudioTime >= mouthCues.start && currentAudioTime <= mouthCues.end) {
        console.log(mouthCues.value)
           nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCues.value]]] = 1;
    nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCues.value]]] = 1; 
    break;
      }
    }
  })
  useEffect(() => {
    if (playAudio) {
      audio.play();
    } else {
      audio.pause();
    }
  }, [playAudio, script])

  const { nodes, materials } = useGLTF('/models/686f9fa40c7afd741510fff9.glb')
  const { animations: idleAnimation } = useFBX("/animations/Idle.fbx")
  const { animations: angryAnimations } = useFBX("/animations/AngryGesture.fbx")
  const { animations: reactionsAnimations } = useFBX("/animations/Reaction.fbx")

  idleAnimation[0].name = 'Idle';
  angryAnimations[0].name = 'Angry';
  reactionsAnimations[0].name = 'Name';

  const [animation, setAnimation] = useState('Idle');
  const group = useRef();
  const { actions } = useAnimations([idleAnimation[0], angryAnimations[0], reactionsAnimations[0]], group);



  useEffect(() => {
    if (actions[animation]) {
      actions[animation].reset().fadeIn(0.5).play();
      return () => {
        actions[animation]?.fadeOut(0.5); // Safe cleanup
      };
    }
  }, [animation, actions]);



  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh geometry={nodes.Wolf3D_Hair.geometry} material={materials.Wolf3D_Hair} skeleton={nodes.Wolf3D_Hair.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Body.geometry} material={materials.Wolf3D_Body} skeleton={nodes.Wolf3D_Body.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Bottom.geometry} material={materials.Wolf3D_Outfit_Bottom} skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Footwear.geometry} material={materials.Wolf3D_Outfit_Footwear} skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton} />
      <skinnedMesh geometry={nodes.Wolf3D_Outfit_Top.geometry} material={materials.Wolf3D_Outfit_Top} skeleton={nodes.Wolf3D_Outfit_Top.skeleton} />
      <skinnedMesh name="EyeLeft" geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeLeft.skeleton} morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary} morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences} />
      <skinnedMesh name="EyeRight" geometry={nodes.EyeRight.geometry} material={materials.Wolf3D_Eye} skeleton={nodes.EyeRight.skeleton} morphTargetDictionary={nodes.EyeRight.morphTargetDictionary} morphTargetInfluences={nodes.EyeRight.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Head" geometry={nodes.Wolf3D_Head.geometry} material={materials.Wolf3D_Skin} skeleton={nodes.Wolf3D_Head.skeleton} morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences} />
      <skinnedMesh name="Wolf3D_Teeth" geometry={nodes.Wolf3D_Teeth.geometry} material={materials.Wolf3D_Teeth} skeleton={nodes.Wolf3D_Teeth.skeleton} morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary} morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences} />
    </group>
  )
}

useGLTF.preload('/models/686f9fa40c7afd741510fff9.glb')
